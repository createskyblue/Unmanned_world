#include <Arduboy2.h>
Arduboy2 arduboy;
#include <ArduboyTones.h>
ArduboyTones sound(arduboy.audio.enabled);
#include <EEPROM.h>
/*=========================================================
                         变量
  =========================================================*/
bool DisplayInvert = false;
unsigned long Timer[5];
/*=========================================================
                         常量
  =========================================================*/
#define mobile_frame_time 150
#define key_cool_time 20


/*=========================================================
                         图片
  =========================================================*/
const uint8_t Block_37[] PROGMEM = {0xfe, 0x01, 0x01, 0x0f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x15, 0x11, 0x0f, 0x01, 0x02, 0x04, 0xf8,
                                    0x7f, 0x80, 0xfe, 0x81, 0x81, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x81, 0x81, 0xfe, 0x80, 0x7f,
                                   };
/*=========================================================
                         音乐
  =========================================================*/
  const uint16_t sound1[] PROGMEM = {
262,480,
392,480,
330,480,
349,480,
262,480,
392,480,
330,480,
0,480,
262,480,
392,480,
330,480,
349,480,
262,480,
392,480,
262,480,
0,480,
262,480,
330,480,
392,480,
0,480,
262,480,
330,480,
440,480,
0,480,
262,480,
330,480,
497,480,
0,480,
262,480,
330,480,
262,480,
0,480,
294,480,
330,480,
349,480,
0,480,
330,480,
349,480,
392,480,
0,480,
392,480,
262,480,
294,480,
349,480,
497,480,
0,480,
497,480,
349,480,
392,480,
497,480,
497,480,
0,480,
880,540,
784,540,
659,540,
587,540,
0,480,
587,540,
659,540,
698,540,
0,480,
698,540,
784,540,
880,540,
0,480,
880,540,
523,540,
587,540,
698,540,
988,540,
988,540,
988,540,
880,540,
784,540,
0,540,
587,480,
497,480,
392,480,
0,480,
392,480,
497,480,
349,480,
0,480,
349,480,
440,480,
262,480,
0,480,
440,480,
262,480,
294,480,
0,480,
392,480,
440,480,
349,480,
0,480,
349,480,
294,480,
262,480,
0,480,
330,480,
392,480,
349,480,
0,480,
392,480,
330,480,
262,480,
0,480,
392,480,
330,480,
349,480,
0,480,
392,480,
262,480,
497,480,
587,480,
392,480,
  TONES_END
};
const uint16_t sound2[] PROGMEM = {
  294, 440,
  587, 440,
  497, 440,
  0, 440,
  294, 440,
  587, 440,
  392, 440,
  0, 440,
  294, 440,
  440, 440,
  523, 440,
  0, 440,
  497, 440,
  440, 440,
  349, 440,
  0, 440,
  330, 440,
  349, 440,
  392, 440,
  0, 440,
  392, 440,
  440, 440,
  262, 440,
  0, 440,
  294, 440,
  330, 440,
  349, 440,
  0, 440,
  349, 440,
  392, 440,
  440, 440,
  0, 440,
  523, 440,
  497, 440,
  523, 440,
  587, 440,
  392, 440,
  0, 880,
  523, 440,
  497, 440,
  392, 440,
  0, 440,
  523, 440,
  497, 440,
  330, 440,
  0, 440,
  523, 440,
  497, 440,
  349, 440,
  0, 440,
  440, 440,
  262, 440,
  294, 440,
  0, 440,
  392, 440,
  330, 440,
  349, 440,
  392, 440,
  523, 440,
  0, 440,
  392, 440,
  349, 440,
  330, 440,
  440, 440,
  523, 440,
  0, 440,
  523, 440,
  497, 440,
  587, 440,
  698, 440,
  784, 440,
  988, 440,
  TONES_END
};
/*=========================================================
                          字库
        https://github.com/emutyworks/8x8DotJPFont/
  =========================================================*/
#define MISAKI_FONT_F1_H
#define MISAKI_FONT_F1_PAGE 0xF1
#define MISAKI_FONT_F1_W 3
#define MISAKI_FONT_F1_SIZE 0x63
PROGMEM const uint8_t misaki_font_f1[ MISAKI_FONT_F1_SIZE + 1 ][ MISAKI_FONT_F1_W ] =
{
  { 0x00, 0x00, 0x00 }, /* 0x00 */
  { 0x00, 0x2f, 0x00 }, /* 0x01 ! */
  { 0x03, 0x00, 0x03 }, /* 0x02 " */
  { 0x3f, 0x12, 0x3f }, /* 0x03 # */
  { 0x16, 0x3f, 0x1a }, /* 0x04 $ */
  { 0x12, 0x08, 0x24 }, /* 0x05 % */
  { 0x32, 0x3d, 0x2a }, /* 0x06 & */
  { 0x02, 0x01, 0x00 }, /* 0x07 ' */
  { 0x00, 0x3e, 0x41 }, /* 0x08 ( */
  { 0x41, 0x3e, 0x00 }, /* 0x09 ) */
  { 0x0a, 0x07, 0x0a }, /* 0x0A * */
  { 0x08, 0x3e, 0x08 }, /* 0x0B + */
  { 0x40, 0x20, 0x00 }, /* 0x0C , */
  { 0x08, 0x08, 0x08 }, /* 0x0D - */
  { 0x00, 0x20, 0x00 }, /* 0x0E . */
  { 0x10, 0x08, 0x04 }, /* 0x0F / */
  { 0x1c, 0x2a, 0x1c }, /* 0x10 0 */
  { 0x24, 0x3e, 0x20 }, /* 0x11 1 */
  { 0x32, 0x2a, 0x24 }, /* 0x12 2 */
  { 0x22, 0x2a, 0x14 }, /* 0x13 3 */
  { 0x18, 0x14, 0x3e }, /* 0x14 4 */
  { 0x2e, 0x2a, 0x12 }, /* 0x15 5 */
  { 0x1c, 0x2a, 0x12 }, /* 0x16 6 */
  { 0x02, 0x3a, 0x06 }, /* 0x17 7 */
  { 0x14, 0x2a, 0x14 }, /* 0x18 8 */
  { 0x24, 0x2a, 0x1c }, /* 0x19 9 */
  { 0x00, 0x24, 0x00 }, /* 0x1A : */
  { 0x40, 0x24, 0x00 }, /* 0x1B ; */
  { 0x08, 0x14, 0x22 }, /* 0x1C < */
  { 0x14, 0x14, 0x14 }, /* 0x1D = */
  { 0x22, 0x14, 0x08 }, /* 0x1E > */
  { 0x02, 0x29, 0x06 }, /* 0x1F ? */
  { 0x12, 0x29, 0x1e }, /* 0x20 @ */
  { 0x3e, 0x09, 0x3e }, /* 0x21 A */
  { 0x3f, 0x25, 0x1a }, /* 0x22 B */
  { 0x1e, 0x21, 0x21 }, /* 0x23 C */
  { 0x3f, 0x21, 0x1e }, /* 0x24 D */
  { 0x3f, 0x25, 0x21 }, /* 0x25 E */
  { 0x3f, 0x05, 0x01 }, /* 0x26 F */
  { 0x1e, 0x21, 0x39 }, /* 0x27 G */
  { 0x3f, 0x08, 0x3f }, /* 0x28 H */
  { 0x21, 0x3f, 0x21 }, /* 0x29 I */
  { 0x10, 0x20, 0x1f }, /* 0x2A J */
  { 0x3f, 0x04, 0x3b }, /* 0x2B K */
  { 0x3f, 0x20, 0x20 }, /* 0x2C L */
  { 0x3f, 0x06, 0x3f }, /* 0x2D M */
  { 0x3f, 0x01, 0x3e }, /* 0x2E N */
  { 0x1e, 0x21, 0x1e }, /* 0x2F O */
  { 0x3f, 0x09, 0x06 }, /* 0x30 P */
  { 0x1e, 0x21, 0x5e }, /* 0x31 Q */
  { 0x3f, 0x09, 0x36 }, /* 0x32 R */
  { 0x22, 0x25, 0x19 }, /* 0x33 S */
  { 0x01, 0x3f, 0x01 }, /* 0x34 T */
  { 0x3f, 0x20, 0x3f }, /* 0x35 U */
  { 0x3f, 0x10, 0x0f }, /* 0x36 V */
  { 0x3f, 0x18, 0x3f }, /* 0x37 W */
  { 0x33, 0x0c, 0x33 }, /* 0x38 X */
  { 0x03, 0x3c, 0x03 }, /* 0x39 Y */
  { 0x31, 0x2d, 0x23 }, /* 0x3A Z */
  { 0x00, 0x7f, 0x41 }, /* 0x3B [ */
  { 0x15, 0x3e, 0x15 }, /* 0x3C \ */
  { 0x41, 0x7f, 0x00 }, /* 0x3D ] */
  { 0x02, 0x01, 0x02 }, /* 0x3E ^ */
  { 0x40, 0x40, 0x40 }, /* 0x3F _ */
  { 0x00, 0x01, 0x02 }, /* 0x40 ` */
  { 0x18, 0x24, 0x3c }, /* 0x41 a */
  { 0x3f, 0x24, 0x18 }, /* 0x42 b */
  { 0x18, 0x24, 0x24 }, /* 0x43 c */
  { 0x18, 0x24, 0x3f }, /* 0x44 d */
  { 0x18, 0x2c, 0x2c }, /* 0x45 e */
  { 0x04, 0x3f, 0x05 }, /* 0x46 f */
  { 0x48, 0x54, 0x3c }, /* 0x47 g */
  { 0x3f, 0x04, 0x38 }, /* 0x48 h */
  { 0x00, 0x3d, 0x00 }, /* 0x49 i */
  { 0x40, 0x3d, 0x00 }, /* 0x4A j */
  { 0x3f, 0x08, 0x34 }, /* 0x4B k */
  { 0x01, 0x3f, 0x00 }, /* 0x4C l */
  { 0x3c, 0x1c, 0x38 }, /* 0x4D m */
  { 0x3c, 0x04, 0x38 }, /* 0x4E n */
  { 0x18, 0x24, 0x18 }, /* 0x4F o */
  { 0x7c, 0x24, 0x18 }, /* 0x50 p */
  { 0x18, 0x24, 0x7c }, /* 0x51 q */
  { 0x3c, 0x08, 0x04 }, /* 0x52 r */
  { 0x28, 0x3c, 0x14 }, /* 0x53 s */
  { 0x04, 0x3e, 0x24 }, /* 0x54 t */
  { 0x3c, 0x20, 0x3c }, /* 0x55 u */
  { 0x3c, 0x10, 0x0c }, /* 0x56 v */
  { 0x3c, 0x30, 0x3c }, /* 0x57 w */
  { 0x24, 0x18, 0x24 }, /* 0x58 x */
  { 0x4c, 0x50, 0x3c }, /* 0x59 y */
  { 0x24, 0x34, 0x2c }, /* 0x5A z */
  { 0x08, 0x36, 0x41 }, /* 0x5B { */
  { 0x00, 0x7f, 0x00 }, /* 0x5C | */
  { 0x41, 0x36, 0x08 }, /* 0x5D } */
  { 0x01, 0x01, 0x01 }, /* 0x5E ~ */
  { 0x10, 0x28, 0x10 }, /* 0x5F ｡ */
  { 0x1f, 0x01, 0x01 }, /* 0x60 ｢ */
  { 0x20, 0x20, 0x3e }, /* 0x61 ｣ */
  { 0x10, 0x20, 0x00 }, /* 0x62 ､ */
  { 0x00, 0x08, 0x00 }, /* 0x63 ･ */
};
#define MISAKI_FONT_F2_H
#define MISAKI_FONT_F2_PAGE 0xF2
#define MISAKI_FONT_F2_W 7
#define MISAKI_FONT_F2_SIZE 0x00
PROGMEM const uint8_t misaki_font_f2[ MISAKI_FONT_F2_SIZE + 1 ][ MISAKI_FONT_F2_W ] =
{
};
/*=========================================================
                          中文对话
  =========================================================*/
#define MESNUM 59 //文本数量
PROGMEM const uint8_t misaki_font_0x00[1] = { 0x00 };
PROGMEM const uint8_t mes0[] =    { 0xf2, 0x00, 0x01, 0x02, 0x03, };
PROGMEM const uint8_t mes1[] =    { 0xf2, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, };
PROGMEM const uint8_t mes2[] =    { 0xf2, 0x04, 0x06, 0x07, 0x08, 0x0c, 0x0d, };
PROGMEM const uint8_t mes3[] =    { 0xf2, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, };
PROGMEM const uint8_t mes4[] =    { 0xf2, 0x14, 0x01, 0x15, 0x16, 0x17, 0x18, };
PROGMEM const uint8_t mes5[] =    { 0xf2, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x09, 0x21, 0x22, 0x23, 0x24, 0x25, };
PROGMEM const uint8_t mes6[] =    { 0xf2, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x04, 0x2c, 0x06, 0x07, };
PROGMEM const uint8_t mes7[] =    { 0xf2, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, };
PROGMEM const uint8_t mes8[] =    { 0xf2, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x1c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, };
PROGMEM const uint8_t mes9[] =    { 0xf2, 0x42, 0x43, 0x20, 0x35, 0x44, 0x45, 0x46, 0x47, 0x17, 0x48, 0x49, 0x4a, 0x4b, };
PROGMEM const uint8_t mes10[] =  { 0xf2, 0x35, 0x4c, 0x10, 0x2a, 0x4d, 0x4e, 0x4f, 0x2e, 0x37, 0x06, 0x07, 0x46, 0x12, 0x50, 0x51, };
PROGMEM const uint8_t mes11[] =  { 0xf2, 0x09, 0x11, 0x26, 0x27, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, };
PROGMEM const uint8_t mes12[] =  { 0xf2, 0x58, 0x11, 0x59, 0x5a, 0x5b, 0x5c, 0x17, 0x5d, 0x5e, 0x5f, 0x60, 0x61, };
PROGMEM const uint8_t mes13[] =  { 0xf2, 0x62, 0x63, 0x2a, 0x2b, 0x4d, 0x4e, };
PROGMEM const uint8_t mes14[] =  { 0xf2, 0x2f, 0x15, 0x31, 0x64, };
PROGMEM const uint8_t mes15[] =  { 0xf2, 0x65, 0x09, 0x52, 0x2c, 0x66, 0x56, 0x67, 0x68, };
PROGMEM const uint8_t mes16[] =  { 0xf2, 0x69, 0x6a, 0x6b, 0x46, 0x6c, 0x6d, 0x6e, 0x6f, 0x6c, 0x70, };
PROGMEM const uint8_t mes17[] =  { 0xf2, 0x08, 0x46, 0x71, 0x09, 0x72, };
PROGMEM const uint8_t mes18[] =  { 0xf2, 0x15, 0x12, 0x73, 0x74, 0x75, };
PROGMEM const uint8_t mes19[] =  { 0xf2, 0x76, 0x77, 0x15, 0x61, };
PROGMEM const uint8_t mes20[] =  { 0xf2, 0x00, 0x01, 0x37, 0x78, 0x79, 0x7a, };
PROGMEM const uint8_t mes21[] =  { 0xf2, 0x08, 0x46, 0x09, 0x65, 0x7b, 0x7c, 0x71, };
PROGMEM const uint8_t mes22[] =  { 0xf2, 0x7d, 0x7e, 0x46, 0x4a, };
PROGMEM const uint8_t mes23[] =  { 0xf2, 0x04, 0x09, 0x7f, 0x37, 0x12, 0x80, 0x46, 0x4a, };
PROGMEM const uint8_t mes24[] =  { 0xf2, 0x04, 0x37, 0x12, 0x2c, 0x81, 0x82, 0x46, 0x83, };
PROGMEM const uint8_t mes25[] =  { 0xf2, 0x04, 0x2c, 0x83, 0x84, 0x85, 0x86, 0x06, 0x07, 0x87, 0x11, };
PROGMEM const uint8_t mes26[] =  { 0xf2, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x4a, };
PROGMEM const uint8_t mes27[] =  { 0xf2, 0x8e, 0x8f, 0x08, 0x46, 0x77, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x12, 0x96, };
PROGMEM const uint8_t mes28[] =  { 0xf2, 0x04, 0x37, 0x12, 0x97, 0x98, };
PROGMEM const uint8_t mes29[] =  { 0xf2, 0x8c, 0x37, 0x12, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x46, };
PROGMEM const uint8_t mes30[] =  { 0xf2, 0x00, 0x9f, 0xa0, 0x37, 0xa1, 0xa2, 0xa3, 0x1e, 0x46, 0xa4, 0xa5, };
PROGMEM const uint8_t mes31[] =  { 0xf2, 0xa6, 0x9f, 0xa0, 0x37, 0xa7, 0xa8, 0xa9, 0xaa, 0x03, };
PROGMEM const uint8_t mes32[] =  { 0xf2, 0xab, 0xa6, 0x86, 0x30, 0xac, 0xad, 0x93, 0x94, 0x2a, 0x2b, };
PROGMEM const uint8_t mes33[] =  { 0xf2, 0x37, 0xae, 0xaf, };
PROGMEM const uint8_t mes34[] =  { 0xf2, 0xb0, 0xb1, 0x2b, 0xb2, 0x58, 0xb3, 0x8b, 0xb4, 0xb5, };
PROGMEM const uint8_t mes35[] =  { 0xf2, 0xae, 0xaf, 0xb6, 0xb7, };
PROGMEM const uint8_t mes36[] =  { 0xf2, 0x37, 0xb8, 0xb9, };
PROGMEM const uint8_t mes37[] =  { 0xf2, 0xba, 0x2f, 0xbb, 0xbc, 0x46, 0x12, 0xb1, 0x90, 0x85, 0xbd, 0xbe, 0xbe, };
PROGMEM const uint8_t mes38[] =  { 0xf2, 0x04, 0x2c, 0x06, 0x07, 0x46, 0xbf, 0xc0, 0x37, 0x15, 0xc1, 0x46, };
PROGMEM const uint8_t mes39[] =  { 0xf2, 0xc2, 0xb3, 0xc3, 0xc4, 0xb2, 0xc5, 0x04, 0x2c, 0x06, 0x07, };
PROGMEM const uint8_t mes40[] =  { 0xf2, 0xc6, 0x06, 0x07, 0x14, 0x62, 0x63, 0x59, 0xc7, 0x37, 0x54, 0x55, 0x56, 0x4c, };
PROGMEM const uint8_t mes41[] =  { 0xf1, 0x32, 0x41, 0x49, 0x4e, 0x00, 0x37, 0x4f, 0x52, 0x4c, 0x44, };
PROGMEM const uint8_t mes42[] =  { 0xf1, 0x33, 0x4c, 0x55, 0x47, 0x00, 0x43, 0x41, 0x54, };
PROGMEM const uint8_t mes43[] =  { 0xf2, 0x04, 0x37, 0xab, 0xa6, 0x12, 0x3f, 0x2b, 0x3c, 0x46, 0xc8, 0x3a, 0xc9, 0xca, };
PROGMEM const uint8_t mes44[] =  { 0xf2, 0xcb, 0x41, 0x04, 0x74, 0x75, 0x37, 0x19, 0x66, 0xcc, 0xcd, 0x46, 0xce, 0xcf, 0xd0, 0xd1, };
PROGMEM const uint8_t mes45[] =  { 0xf2, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0x8a, 0xd8, };
PROGMEM const uint8_t mes46[] =  { 0xf2, 0x8e, 0xd9, 0xcb, 0xda, 0x8b, 0x90, 0xb5, 0xdb, 0xdc, 0xdd, 0xde, };
PROGMEM const uint8_t mes47[] =  { 0xf2, 0xdf, 0x44, 0x09, 0x0a, 0x0b, 0xe0, 0x75, 0xe1, 0xe2, 0x90, 0xe3, };
PROGMEM const uint8_t mes48[] =  { 0xf2, 0x8e, 0xd9, 0xcb, 0xda, 0xcc, 0xcd, 0x90, 0xe4, 0x00, 0x25, 0xdd, 0xde, };
PROGMEM const uint8_t mes49[] =  { 0xf2, 0x2f, 0x37, 0x09, 0x3c, 0x11, 0x25, 0x46, };
PROGMEM const uint8_t mes50[] =  { 0xf2, 0x76, 0x61, 0x14, };
PROGMEM const uint8_t mes51[] =  { 0xf2, 0x0c, 0x74, };
PROGMEM const uint8_t mes52[] =  { 0xf2, 0x00, 0x56, 0x0c, 0x0d, };
PROGMEM const uint8_t mes53[] =  { 0xf2, 0xe5, 0xe6, 0xe7, 0xe8, };
PROGMEM const uint8_t mes54[] =  { 0xf2, 0x02, 0x03, 0x15, 0x06, 0x07, 0xe9, 0xea, 0x15, 0x31, 0x0c, 0x0d, };
PROGMEM const uint8_t mes55[] =  { 0xf2, 0xeb, 0xec, 0xed, 0x8a, };
PROGMEM const uint8_t mes56[] =  { 0xf2, 0x16, 0x17, 0x09, 0xee, 0x94, 0x4e, 0x25, };
PROGMEM const uint8_t mes57[] =  { 0xf2, 0x37, 0xef, };
PROGMEM const uint8_t mes58[] =  { 0xf2, 0xe8, };

/*                                 1     2     3     4      5     6     7    8     9      10    11   12    13    14     15   X
  PROGMEM const uint8_t mes[] =
*/
const unsigned char *MES[MESNUM] = {
  mes0, mes1, mes2, mes3, mes4, mes5, mes6, mes7, mes8, mes9, mes10,
  mes11, mes12, mes13, mes14, mes15, mes16, mes17, mes18, mes19, mes20,
  mes21, mes22, mes23, mes24, mes25, mes26, mes27, mes28, mes29, mes30,
  mes31, mes32, mes33, mes34, mes35, mes36, mes37, mes38, mes39, mes40,
  mes41, mes42, mes43, mes44, mes45, mes46, mes47, mes48, mes49, mes50,
  mes51, mes52, mes53, mes54, mes55, mes56, mes57, mes58,
};
PROGMEM const uint8_t MESleng[] = {};

/*====================================================================
                             软重启函数
  ====================================================================*/
void(* resetFunc) (void) = 0; //制造重启命令
/*====================================================================
                             只循环一次
  ====================================================================*/
void setup()
{
  arduboy.boot();
  SetTextColor(0);
  arduboy.invert(DisplayInvert);
  //Serial.begin(115200);
  arduboy.audio.on();
  sound.tones(sound1);
  //Eload();
}
/*====================================================================
                             主程序
  ====================================================================*/
void loop()
{
  draw();
}
/*
   场景虚化
*/
void Blur(int sx, int sy, int ex, int ey, byte f) {
  for (byte y = 0; y < 64; y++) {
    for (byte x = 0; x < 128; x++) {
      if (x % 2 == y % 2 && x % 2 == 0 && x >= sx && x <= ex && y >= sy && y <= ey) arduboy.drawPixel(x + (f > 0 && f < 3), y + (f > 1), 0);
    }
  }
}
void MBlur() {
  for (byte f = 0; f < 4; f++) {
    Blur(0, 0, 127, 64, f);
    arduboy.display();
    delay(250);
  }
}
/*=========================================================
                     绘图
  =========================================================*/
void draw()
{
  arduboy.clear();
  arduboy.println(millis());
  arduboy.display();
}

void drawText(uint8_t x, uint8_t y, const uint8_t *mes, uint8_t cnt)
{
  uint8_t pb;
  uint8_t page;
  uint8_t screen_start = 0;
  uint8_t screen_end = 128;
  if (x < screen_start) {
    x = screen_start;
  }
  for (uint8_t i = 0; i < cnt; i++) {
    pb = pgm_read_byte_near(mes + i);
    switch (pb) {
      case MISAKI_FONT_F1_PAGE:
        page = MISAKI_FONT_F1_PAGE;
        continue;
      case MISAKI_FONT_F2_PAGE:
        page = MISAKI_FONT_F2_PAGE;
        continue;
    }
    if (!page) {
      continue;
    }
    arduboy.fillRect(x, y - 1, 8, 9, 1); //白底
    switch (page) {
      case MISAKI_FONT_F1_PAGE:
        if (pb > MISAKI_FONT_F1_SIZE) {
          continue;
        }
        if ((x + 4) > screen_end) {
          x = screen_start;
          y = y + 8;
        }
        arduboy.drawBitmap(x, y,  misaki_font_f1[ pb ], MISAKI_FONT_F1_W, 8, 0);
        arduboy.drawBitmap(x + 3, y, misaki_font_0x00, 1, 8, 0);
        x = x + 4;
        break;
      case MISAKI_FONT_F2_PAGE:
        if (pb > MISAKI_FONT_F2_SIZE) {
          continue;
        }
        if ((x + 8) > screen_end) {
          x = screen_start;
          y = y + 8;
        }
        arduboy.drawBitmap(x, y,  misaki_font_f2[ pb ], MISAKI_FONT_F2_W, 8, 0);
        arduboy.drawBitmap(x + 7, y, misaki_font_0x00, 1, 8, 0);
        x = x + 8;
        break;
    }
    if ((x + 8) > screen_end) {
      x = screen_start;
      y = y + 8;
    }
  }
}
void SetTextColor(bool color) {
  arduboy.setTextColor(color);
  arduboy.setTextBackground(!color);
}
void Eload() {
  if (EEPROM.read(512) != 3 ) {
    UpdateROM();
  }
}
/*
   提示更新固件
*/
void UpdateROM() {
  arduboy.clear();
  //arduboy.invert(1);
  arduboy.fillRect(0, 0, 128, 64, 1);
  arduboy.drawBitmap(55, 7, Block_37, 16, 16, 0);
  arduboy.setCursor(4, 39);
  arduboy.print(F("Please upload Part"));
  arduboy.setCursor(120, 39);
  arduboy.print(EEPROM.read(512));
  arduboy.display();
  while (1) {}
}
